{{>licenseInfo}}

package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import {{invokerPackage}}.ApiClient;
import {{apiPackage}}.{{classname}};
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static {{invokerPackage}}.GsonObjectMapper.gson;

/**
 * API tests for {{classname}}
 */
@Ignore
public class {{classname}}Test {

    private {{classname}} api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("{{{basePath}}}"))).{{classVarName}}();
    }
{{#operations}}
{{#operation}}

    {{#responses}}
    /**
     * {{message}}
     */
    @Test
    public void shouldSee{{code}}After{{operationIdCamelCase}}() {
        {{#allParams}}
        {{#is this 'header-param'}}String {{paramName}} = null;{{/is}}{{#isNot this 'header-param'}}{{{dataType}}} {{paramName}} = null;{{/isNot}}
        {{/allParams}}
        api.{{operationId}}(){{#allParams}}{{#required}}{{#is this 'path-param'}}
                .{{paramName}}Path({{paramName}}){{/is}}{{#is this 'query-param'}}
                .{{paramName}}Query({{paramName}}){{/is}}{{#is this 'form-param'}}{{#isNot this 'file'}}
                .{{paramName}}Form({{paramName}}){{/isNot}}{{/is}}{{#is this 'form-param'}}{{#is this 'file'}}
                .{{paramName}}MultiPart({{paramName}}){{/is}}{{/is}}{{#is this 'header-param'}}
                .{{paramName}}Header({{paramName}}){{/is}}{{#is this 'body-param'}}
                .body({{paramName}}){{/is}}{{/required}}{{/allParams}}.execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    {{/responses}}
{{/operation}}
{{/operations}}
}